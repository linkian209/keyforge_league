"""model.season_player

This module contains the SeasonPlayer model
"""
from app import db
from sqlalchemy import sql


class SeasonPlayer(db.Model):
    __tablename__ = 'season_player'
    """
    This model contains the seasonal instances of each user. This instance is
    used to track matches and seasonal performance. Overall player statistics
    are generated by looking at the performance of all seaonsal instances.

    Attributes:
        id (int): Unique ID of the seasonal instance
        user_id (ForeignKey): ID of the user associated with this instance
        user (backref): Not defined - a back reference to the user object
        season_id (ForeignKey): ID of the season associated with this instance
        season (backref): Not defined - a back reference to the season object
        decks (relationship): All seasonal references of decks played
        player_1_matches (backref): Not defined - All matches where this
                                    player was player 1
        player_2_matches (backref): Not defined - All matches where this
                                    player was player 2
        total_wins (int): The number of wins for this player
        total_losses (int): The number of loses for this player
        active (bool): Whether this the active instance for the player
    """
    # Attributes
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    season_id = db.Column(db.Integer, db.ForeignKey('season.id'))
    decks = db.relationship('SeasonDeck', backref='season_player')
    total_wins = db.Column(db.Integer, default=0)
    total_losses = db.Column(db.Integer, default=0)
    active = db.Column(db.Boolean, default=True)

    # Functions
    def __repr__(self):
        """
        This returns the string representation of the League

        Returns:
            str: The string representaion
        """
        return '<SeasonPlayer {} - Season {} | Player {}>'.format(
            self.id, self.season_id, self.user.name
        )

    def endSeason(self):
        """
        When the season ends, we need to add the number of wins and losses to
        the player's statistics, then end the season for each of the decks

        Args:
            :param self: This object
        """
        # If we are the active, update the player
        if(self.active):
            # Update the player
            self.user.total_wins += self.total_wins
            self.user.total_losses += self.total_losses

            # End the season for the decks
            for deck in self.decks.all():
                deck.endSeason()

        # Set all active instances as inactive
        SeasonPlayer.query.filter_by(active=True).update(dict(active=False))

        # Commit
        db.session.commit()